{
  "author": {
    "name": "CrossEye",
    "email": "scott@sauyet.com",
    "url": "scott.sauyet.com"
  },
  "contributors": [
    {
      "name": "buzzdecafe",
      "email": "mh@buzzdecafe.com",
      "url": "http://buzzdecafe.com"
    },
    {
      "name": "Scott Sauyet",
      "email": "scott@sauyet.com",
      "url": "http://fr.umio.us"
    }
  ],
  "name": "ramda",
  "description": "A practical functional library for Javascript programmers.",
  "version": "0.2.4",
  "homepage": "https://www.github.com/CrossEye/ramda",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/CrossEye/ramda.git"
  },
  "main": "ramda.js",
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {},
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.7",
    "grunt-mocha": "~0.3.4",
    "grunt-docco": "latest",
    "grunt-contrib-clean": "^0.5.0",
    "grunt-contrib-jshint": "~0.7.0",
    "grunt-contrib-uglify": "~0.2.2",
    "grunt-mocha-test": "~0.5.0",
    "grunt-benchmark": "https://github.com/buzzdecafe/grunt-benchmark/archive/09999a8c3fbfff04a1695846c1ccd0bd8a0ef5ab.tar.gz",
    "benchmark": "~1.0.0",
    "lodash": "latest",
    "orchestrate": "~0.2.0",
    "grunt-contrib-copy": "^0.5.0",
    "grunt-push-release": "^0.1.1"
  },
  "readme": "Project Ramda\n=============\n\nA practical functional library for Javascript programmers.\n\n[![Build Status](https://travis-ci.org/CrossEye/ramda.svg?branch=master)](https://travis-ci.org/CrossEye/ramda)\n\nGoals\n-----\n\n<img src=\"http://ramda.jcphillipps.com/logo/ramdaFilled_200x235.png\" \n     width=\"200\" height=\"235\" align=\"left\" hspace=\"12\" />\nUsing this library should feel as much like using Javascript as \npossible.  Of course it's functional Javascript, but we're not \nintroducting lambda expressions in strings, we're not borrowing consed \nlists, we're not porting over all of the Clojure functions.\n\nOur basic data structures will be normal Javascript objects, and our \nusual collections will be Javascript arrays.  We will not try to reach \nthe point where all the functions have only zero, one, or two arguments.\nWe will certainly try to keep some of the normal features of Javascript \nthat seem to be unusual in functional languages, including variable \nlength function signatures and functions as objects with properties.\n\nRamda will never be a drop-in replacement for Underscore (or LoDash, or \neven a drop-in-and-mechanically-switch-the-parameter-order-everywhere \nreplacement.) It is intended to work with a different style of coding. \nFunctional programming is in good part about immutable objects and \nside-effect free functions. While Ramda does not expect to do anything to \n*enforce* that style, its code should always work to make that style as \nfrictionless as possible.\n\nAs much as we can, we would like the implementation to be both clean and \nelegant.  But the API is king: we will sacrifice a great deal of \nimplementation elegance for even a slightly cleaner API.\n\nUnlike the developers of that silly-named _Eweda_ project, though, this \none will focus also on performance, striving for a reliable and quick \nimplementation over any notions of functional purity.\n\nInstallation\n------------\n\nTo use with node:\n\n    npm install ramda\n\nThen in the console:\n\n    var ramda = require('ramda')\n\nTo use directly in the browser:\n\n    <script src=\"path/to/yourCopyOf/ramda.js\"></script>\n\nor the minified version:\n\n    <script src=\"path/to/yourCopyOf/ramda.min.js\"></script>\n\nor from a CDN, either cdnjs:\n\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/ramda/0.2.3/ramda.min.js\"></script>\n\nor jsdelivr:\n\n    <script src=\"//cdn.jsdelivr.net/ramda/0.2.3/ramda.min.js\"></script>\n    <script src=\"//cdn.jsdelivr.net/ramda/0.2/ramda.min.js\"></script>\n    <script src=\"//cdn.jsdelivr.net/ramda/latest/ramda.min.js\"></script>\n\n(note that using `latest` is taking a significant risk that ramda API changes could break your code.)\n\nThese script tags add the variable `ramda` on the browser's global scope.\n\n\nDocumentation\n-------------\n\nPlease review the [annotated source code \ndocumentation](https://rawgithub.com/CrossEye/ramda/master/docs/ramda.html) \n(generated by [Docco](http://jashkenas.github.io/docco/)). So far, \nthat's the only documentation available.\n\n\n\nThe Name\n--------\n\nOk, so we like sheep.  That's all.  It's a short name, not already \ntaken.  It could as easily have been `eweda`, but then we would be \nforced to say _eweda lamb!_, and no one wants that.  For non-English \nspeakers, lambs are baby sheep, ewes are female sheep, and rams are male \nsheep.  So perhaps ramda is a grown-up lambda... but probably not.\n\n\n\nStructure\n---------\n\n### Automatic Currying ###\n\nThe functions included should automatically allow for partial \napplication without an explicit call to lPartial.  Many of these operate \non lists.  A single list parameter should probably come last, which \nmight conflict with the design of other libraries that have strong \nfunctional components (I'm looking at you Underscore!)\n\nThe idea is that, if foldl has this signature:\n\n    var foldl = function(fn, accum, arr) { /* ... */}\n\nand we have this simple function:\n\n    var add = function(a, b) {return a + b;};\n\nthen, instead of having to manually call lPartial like this:\n\n     var sum = lPartial(foldl, add, 0);\n     var total = sum([1, 2, 3, 4]);\n\nwith ramda, we can just do this:\n\n     var sum = foldl(add, 0);\n     var total = sum([1, 2, 3, 4]);\n\n\n\nSo What's With Eweda?\n---------------------\n\nThe [eweda library](https://github.com/CrossEye/eweda) was written by \nthe developers of this library, with similar goals.  But that one strove \nmore for implementation elegance than for practical capabilities.  Ramda \nis all about giving users real-world tools.  Eweda can be seen more as \nan academic excercise, mostly proving out what does and doesn't work, and \ndoing so as elegantly as possible.\n\nAcknowledgements\n-----------------\n\nThanks to [J. C. Phillipps](http://www.jcphillipps.com) for the Ramda logo.\nRamda logo artwork &copy; 2014 J. C. Phillipps. Licensed Creative Commons \n[CC BY-NC-SA 3.0](http://creativecommons.org/licenses/by-nc-sa/3.0/).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/CrossEye/ramda/issues"
  },
  "_id": "ramda@0.2.4",
  "dist": {
    "shasum": "330aaefec40313be416c7ccd21660fc50897c833"
  },
  "_from": "ramda@^0.2.3",
  "_resolved": "https://registry.npmjs.org/ramda/-/ramda-0.2.4.tgz"
}
